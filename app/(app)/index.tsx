import React, { useState, useEffect, useCallback } from 'react';
import { StyleSheet, ScrollView } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context'
import { COLORS } from '../../src/constants/theme';
import { HomeHeader } from '../../src/components/HomeHeader';
import { SpecialtyGrid } from '../../src/components/SpecialtyGrid';
import { VideoCard } from '../../src/components/VideoCard';
import { SecondOpinionCard } from '../../src/components/SecondOpinionCard';
import { FeaturedDoctorsList } from '../../src/components/FeaturedDoctorsList';
import { NotificationsPopup, Notification } from '../../src/components/NotificationsPopup';
import { useAuth } from '../../src/context/AuthContext';
import { getClientProfileByUserId } from '../../src/api/services/patient';
import { getDoctorByIdDetail } from '../../src/api/services/doctor';

const initialNotifications: Notification[] = [
  { 
    id: '1', 
    title: 'Bem-vindo!', 
    message: 'Explore os nossos especialistas e agende a sua primeira consulta.', 
    time: '2 dias atr√°s', 
    read: false, 
    link: '/searchDoctor', 
    type: 'default' 
  },
  { 
    id: '2', 
    title: 'Complete o seu Cadastro', 
    message: 'Percebemos que o seu perfil n√£o est√° completo. Toque aqui para finalizar.', 
    time: '3 dias atr√°s', 
    read: false, 
    link: '/register', 
    type: 'default' 
  },
  { 
    id: '3', 
    title: '√â um Profissional de Sa√∫de?', 
    message: 'Clique aqui para se cadastrar como m√©dico e oferecer seus servi√ßos.', 
    time: '3 dias atr√°s', 
    read: true, 
    link: '/registerDoctor',
    type: 'doctor' 
  },
];

export default function HomeScreen() {
  const { session, isAuthenticated } = useAuth();
  
  // ‚úÖ Estados organizados
  const [userName, setUserName] = useState('Visitante'); 
  const [loadingUserName, setLoadingUserName] = useState(false);
  const [isNotificationsVisible, setIsNotificationsVisible] = useState(false);
  const [notifications, setNotifications] = useState<Notification[]>(initialNotifications);
  const [hasUnread, setHasUnread] = useState(false); // ‚úÖ Estado adicionado

  // ‚úÖ Fun√ß√£o otimizada para carregar nome do usu√°rio
  const loadUserName = useCallback(async () => {
    if (!isAuthenticated || !session.userId) {
      setUserName('Visitante');
      return;
    }

    setLoadingUserName(true);
    
    try {
      if (session.role === 'patient') {
        const patientData = await getClientProfileByUserId(session.userId);
        const firstName = patientData.name.split(' ')[0];
        setUserName(firstName);
        console.log('[HomeScreen] ‚úÖ Nome do paciente carregado:', firstName);
        
      } else if (session.role === 'doctor') {
        if (!session.profileId) {
          console.warn('[HomeScreen] ‚ö†Ô∏è profileId n√£o encontrado para m√©dico');
          setUserName('Doutor');
          return;
        }
        
        const doctorData = await getDoctorByIdDetail(session.profileId);
        const firstName = doctorData.name.split(' ')[0];
        setUserName(firstName);
        console.log('[HomeScreen] ‚úÖ Nome do m√©dico carregado:', firstName);
        
      } else {
        setUserName('Visitante');
      }
      
    } catch (error: any) {
      console.error('[HomeScreen] ‚ùå Erro ao carregar nome do usu√°rio:', error);
      
      // ‚úÖ Tratamento de erro melhorado
      if (error.response?.status === 401) {
        console.log('[HomeScreen] üîí Token inv√°lido, usando nome padr√£o');
        setUserName('Visitante');
      } else if (error.response?.status === 404) {
        console.log('[HomeScreen] üîç Usu√°rio n√£o encontrado, usando nome padr√£o');
        if (session.role === 'doctor') {
          setUserName('Doutor');
        } else if (session.role === 'patient') {
          setUserName('Paciente');
        } else {
          setUserName('Usu√°rio');
        }
      } else {
        // ‚úÖ Fallback baseado no role
        if (session.role === 'doctor') {
          setUserName('Doutor');
        } else if (session.role === 'patient') {
          setUserName('Paciente');
        } else if (session.role) {
          setUserName('Usu√°rio');
        } else {
          setUserName('Visitante');
        }
      }
    } finally {
      setLoadingUserName(false);
    }
  }, [isAuthenticated, session.userId, session.role, session.profileId]);

  // ‚úÖ Effect para carregar nome do usu√°rio
  useEffect(() => {
    loadUserName();
  }, [loadUserName]);

  // ‚úÖ Effect para verificar notifica√ß√µes n√£o lidas
  useEffect(() => {
    const unreadExists = notifications.some(n => !n.read);
    setHasUnread(unreadExists);
    console.log('[HomeScreen] üìß Notifica√ß√µes n√£o lidas:', unreadExists);
  }, [notifications]);

  // ‚úÖ Fun√ß√£o para marcar todas como lidas
  const markAllAsRead = useCallback(() => {
    setNotifications(prevNotifications => 
      prevNotifications.map(notification => ({ 
        ...notification, 
        read: true 
      }))
    );
    console.log('[HomeScreen] ‚úÖ Todas as notifica√ß√µes marcadas como lidas');
  }, []);

  // ‚úÖ Fun√ß√£o para abrir popup de notifica√ß√µes
  const handleNotificationsPress = useCallback(() => {
    console.log('[HomeScreen] üîî Abrindo popup de notifica√ß√µes');
    setIsNotificationsVisible(true);
    markAllAsRead(); // Marca todas como lidas ao abrir
  }, [markAllAsRead]);

  // ‚úÖ Fun√ß√£o para fechar popup de notifica√ß√µes
  const handleCloseNotifications = useCallback(() => {
    console.log('[HomeScreen] ‚ùå Fechando popup de notifica√ß√µes');
    setIsNotificationsVisible(false);
  }, []);

  return (
    <SafeAreaView style={styles.safeArea}>
      <HomeHeader 
        userName={loadingUserName ? 'Carregando...' : userName}
        onNotificationsPress={handleNotificationsPress}
        hasUnreadNotifications={hasUnread}
      />
      
      <ScrollView 
        showsVerticalScrollIndicator={false}
        contentContainerStyle={styles.scrollContent}
      >
        <SpecialtyGrid />
        <VideoCard />
        <SecondOpinionCard />
        <FeaturedDoctorsList />
      </ScrollView>
      
      <NotificationsPopup 
        visible={isNotificationsVisible}
        onClose={handleCloseNotifications}
        notifications={notifications}
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  scrollContent: {
    flexGrow: 1,
    paddingBottom: 20, // ‚úÖ Padding inferior para melhor UX
  },
});

